// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //Notes:
    //loadM = load for memory
    //loadS = load for screen

    // Put your code here:
    Not(in=address[14], out=notA14);
    And(a=notA14, b=load, out=loadM); //If (address 14 == 0 -> notA14 == 1) and load == 1, loadS == 1. else loadM == 0
    And(a=address[14], b=load, out=loadS); //If address 14 == 1 and load == 1, loadS == 1. else loadS == 0

    Keyboard(out=keyb);
    Screen(in=in, load=loadS, address=address[0..12], out=scr); //if loadS == 1, write input on the screen
    RAM16K(in=in, load=loadM, address=address[0..13], out=Mem); //if loadM == 1, save input in the memory from the specific address

    Mux16(a=scr, b=keyb, sel=address[13], out=outSKey); 
    // 110000000000000 is the address for keyboard while 10XXXXXXXXXXXXX is the address for screen. so let address[13] as the sell.
    //  ^                                                 ^
    // address[13] == 1                               address[13] == 0
    // if address[13] == 1, write input in keyboard memory
    // else if address[13] == 0, write input in screen memory

    Mux16(a=Mem, b=outSKey, sel=address[14], out=out);
    // 1XXXXXXXXXXXXXXX is the address for screen and keyboard memory while 0XXXXXXXXXXXXXXX is the address of accessable memory
    // ^                                                                    ^
    // address[14] == 1                                                 address[14] == 0
}